from prisma import Prisma
import logging
import pymysql
import os
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

prisma = Prisma()

# MySQL connection config
MYSQL_CONFIG = {
    "host": os.getenv("DATABASE_HOST", "localhost"),
    "port": int(os.getenv("DATABASE_PORT", 3306)),
    "user": os.getenv("DATABASE_USERNAME", "root"),
    "password": os.getenv("DATABASE_PASSWORD", ""),
    "database": os.getenv("DATABASE_NAME", "baohuyhq"),
    "charset": "utf8mb4",
    "cursorclass": pymysql.cursors.DictCursor
}

async def connect_db():
    """K·∫øt n·ªëi Prisma Client"""
    if not prisma.is_connected():
        logger.info("üîå Connecting to MySQL...")
        await prisma.connect()
        logger.info("‚úÖ MySQL connected")
    else:
        logger.debug("‚ö†Ô∏è MySQL already connected")

async def disconnect_db():
    """Ng·∫Øt k·∫øt n·ªëi Prisma Client"""
    if prisma.is_connected():
        logger.info("üîå Disconnecting MySQL...")
        await prisma.disconnect()
        logger.info("‚úÖ MySQL disconnected")
    else:
        logger.debug("‚ö†Ô∏è MySQL already disconnected")

def get_access_token_by_id(customer_id: int | None = None):
    """
    L·∫•y access tokens t·ª´ database b·∫±ng pymysql (sync function)
    
    Args:
        customer_id: N·∫øu c√≥, ch·ªâ l·∫•y token c·ªßa customer ƒë√≥. N·∫øu None, l·∫•y d√≤ng ƒë·∫ßu ti√™n.
    
    Returns:
        List[Token]: Danh s√°ch tokens (lu√¥n tr·∫£ v·ªÅ list ƒë·ªÉ consistent)
    """
    logger.info(f"üîç Fetching tokens for customer_id={customer_id}")
    
    connection = None
    try:
        # ‚úÖ K·∫øt n·ªëi MySQL tr·ª±c ti·∫øp
        connection = pymysql.connect(**MYSQL_CONFIG)
        
        with connection.cursor() as cursor:
            if customer_id:
                # L·∫•y token c·ªßa 1 customer c·ª• th·ªÉ
                sql = "SELECT * FROM TiktokShopTokens WHERE customer_id = %s LIMIT 1"
                cursor.execute(sql, (customer_id,))
            else:
                # L·∫•y d√≤ng ƒë·∫ßu ti√™n
                sql = "SELECT * FROM TiktokShopTokens LIMIT 1"
                cursor.execute(sql)
            
            result = cursor.fetchone()
            tokens = [result] if result else []
        
        logger.info(f"‚úÖ Found {len(tokens)} token(s)")
        
        # ‚úÖ Log access_token ƒë·ªÉ ki·ªÉm tra
        if tokens:
            logger.info(f"üìù Access token: {tokens[0]['access_token'][:20]}...")
        
        return tokens
        
    except Exception as e:
        logger.error(f"‚ùå Failed to fetch tokens: {e}", exc_info=True)
        raise
    finally:
        if connection:
            connection.close()

def get_shop_cipher_by_customer_id(customer_id: int):
    """
    L·∫•y shop_cipher t·ª´ database b·∫±ng pymysql (sync function)
    
    Args:
        customer_id: ID c·ªßa customer.
    
    Returns:
        str | None: shop_cipher ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y.
    """
    logger.info(f"üîç Fetching shop_cipher for customer_id={customer_id}")
    
    connection = None
    try:
        # ‚úÖ K·∫øt n·ªëi MySQL tr·ª±c ti·∫øp
        connection = pymysql.connect(**MYSQL_CONFIG)
        
        with connection.cursor() as cursor:
            sql = "SELECT * FROM TiktokShopData LIMIT 1"
            cursor.execute(sql, (customer_id,))
            result = cursor.fetchone()
            shop_cipher = result['shop_cipher'] if result else None
        
        if shop_cipher:
            logger.info(f"‚úÖ Found shop_cipher for customer_id={customer_id}")
        else:
            logger.warning(f"‚ö†Ô∏è No shop_cipher found for customer_id={customer_id}")
        
        return shop_cipher
        
    except Exception as e:
        logger.error(f"‚ùå Failed to fetch shop_cipher: {e}", exc_info=True)
        raise
    finally:
        if connection:
            connection.close()